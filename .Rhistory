install.packages("pgmm")
install.packages("rpart")
install.packages("rpart")
library(AppliedPredictiveModeling)
library(caret)
library(pgmm)
library(rpart)
sessionInfo()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
inTrain = createDataPartition(segmentationOriginal$Case, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
dim(segmentationOriginal)
set.seed(125)
set.seed(125)
inTrain = createDataPartition(segmentationOriginal$Case, p = 3/4)[[1]]
training = segmentationOriginal[ inTrain,]
testing = segmentationOriginal[-inTrain,]
set.seed(126)
inTrain <- createDataPartition(segmentationOriginal$Case, p = 3/4)[[1]]
training <- segmentationOriginal[ inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
inTrain <- createDataPartition(segmentationOriginal$Case, p = 3/4)[[1]]
training <- segmentationOriginal[ inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Class~., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
newdata
oliveFit <- train(Area~., method="rpart", data=olive)
predict(oliveFit, newdata)
head(olive)
summary(olive)
unique(olive$Area)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
install.packages("~/Downloads/ElemStatLearn_2012.04-0.tar.gz", repos = NULL, type = "source")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(SAheart)
set.seed(13234)
heartFit <- train(chd~c(age, alcohol, obesity, tobacco, typea, ldl),
method="glm", family="binomial", data=trainSA)
trainSA[,c("chd","age")]
colnames <- c("chd","age","alocohol","obesity","tobacco","typea","ldl")
trainSAsmall <- trainSA[, colnames]
testSAsmall <- testSA[, colnames]
heartFit <- train(chd~., method="glm", family="binomial", data=trainSA)
class(trainSA$chd)
head(trainSA$chd)
head(as.factor(trainSA$chd))
trainSAsmall$chd <- as.factor(trainSAsmall$chd)
testSAsmall$chd <- as.factor(testSAsmall$chd)
trainSAsmall$chd
colnames <- c("chd","age","alcohol","obesity","tobacco","typea","ldl")
trainSAsmall <- trainSA[, colnames]
testSAsmall <- testSA[, colnames]
trainSAsmall$chd <- as.factor(trainSAsmall$chd)
testSAsmall$chd <- as.factor(testSAsmall$chd)
heartFit <- train(chd~., method="glm", family="binomial", data=trainSA)
heartFit <- train(chd~., method="glm", family="binomial", data=trainSAsmall)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
testSAsmall
head(testSAsmall)
head(testSAsmall[,-c("chd")])
head(testSAsmall[,-"chd"])
head(testSAsmall[,-1])
heartPred <- predict(heartFit, newdata=testSAsmall[,-1])
head(heartPred)
nrow(heartPred)
length(heartPred)
sum(heartPred)
sum(heartPred=="1")
missClass(testSAsmall[,"chd"], heartPred)
colnames <- c("chd","age","alcohol","obesity","tobacco","typea","ldl")
trainSAsmall <- trainSA[, colnames]
testSAsmall <- testSA[, colnames]
heartFit <- train(chd~., method="glm", family="binomial", data=trainSAsmall)
heartPred <- predict(heartFit, newdata=testSAsmall[,-1])
head(heartPred)
missClass(testSAsmall[,"chd"], heartPred)
missClass(trainSAsmall[,"chd"], heartPred)
set.seed(13234)
heartFit <- train(chd~., method="glm", family="binomial", data=trainSAsmall)
heartPred <- predict(heartFit, newdata=testSAsmall[,-1])
trainPred <- predict(heartFit, newdata=trainSAsmall[,-1])
missClass(trainSAsmall[,"chd"], trainPred)
missClass(testSAsmall[,"chd"], heartPred)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
colnames <- c("chd","age","alcohol","obesity","tobacco","typea","ldl")
trainSAsmall <- trainSA[, colnames]
testSAsmall <- testSA[, colnames]
heartFit <- train(chd~., method="glm", family="binomial", data=trainSAsmall)
heartPred <- predict(heartFit, newdata=testSAsmall[,-1])
trainPred <- predict(heartFit, newdata=trainSAsmall[,-1])
missClass(testSAsmall[,"chd"], heartPred)
missClass(trainSAsmall[,"chd"], trainPred)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.test)
head(vowel.test)
head(vowel.test, 20)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
?randomForest
??randomForest
vowel.forest <- randomForest(y ~ ., data=vowel.train, importance=TRUE)
install.packages("randomForest")
library(randomForest)
vowel.forest <- randomForest(y ~ ., data=vowel.train, importance=TRUE)
importance(vowel.forest)
varImp(vowel.forest)
?varImp
importance(vowel.forest)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1], size = dim(SAheart)[1] / 2, replace = F)
trainSA = SAheart[train, ]
testSA = SAheart[-train, ]
missClass = function(values, prediction){sum(((prediction > 0.5) * 1) != values) / length(values)}
set.seed(13234)
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass(testSA$chd, predict(modelSA, newdata = testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y~., method="rpart", data=vowel.train)
library(caret)
modFit <- train(y~., method="rpart", data=vowel.train)
modFit
modFit <- train(y~., method="rf", data=vowel.train)
modFit
rfFit <- modFit
rfFit
vowel.test
rfPred <- predict(rfFit, vowel.test[,-1])
rfPred
sum(rfPred == vowel.test$y)
nrow(vowel.test)
275/462
length(rfPred)
gbmFit <- train(y~., method="gbm", data=vowel.train)
gbmAcc
gbmPred
gbmFit
gbmPred <- predict(gbmFit, vowel.test[,-1])
gbmAcc <- sum(gbmPred == vowel.test$y) / length(gbmPred)
gbmAcc
bothAgree <- rfPred[rfPred==gbmPred]
bothAgree
bothAgreeTrue <- vowel.test$y[rfPred == gbmPred]
bothAgAcc <- sum(bothAgree == vowel.test$y) / length(bothAgreeTrue)
bothAgreeTrue <- vowel.test[,rfPred == gbmPred]$y
bothAgreeTrue <- vowel.test[rfPred == gbmPred,"y"]
bothAgAcc <- sum(bothAgree == vowel.test$y) / length(bothAgreeTrue)
bothAgreeTrue <- vowel.test[rfPred == gbmPred,]$y
bothAgAcc <- sum(bothAgree == vowel.test$y) / length(bothAgreeTrue)
length(bothAgree)
bothAgreeTrue
length(bothAgreeTrye)
length(bothAgreeTrue)
bothAgAcc <- sum(bothAgree == bothAgreeTrue) / length(bothAgreeTrue)
bothAgAcc
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
rfFit <- train(diagnosis~., method="rf", data=training)
rfPred <- predict(rfFit, training[,-1])
gbmFit <- train(diagnosis~., method="gbm", data=training)
gbmPred <- predict(gbmFit, training[,-1])
ldaPred <- predict(ldaFit, testing[,-1])
gbmPred <- predict(gbmFit, testing[,-1])
rfPred <- predict(rfFit, testing[,-1])
ldaFit <- train(diagnosis~., method="lda", data=training)
ldaPred <- predict(ldaFit, testing[,-1])
ldaPred <- predict(ldaFit, testing[,-1])
predDf <- data.frame(rfPred, gbmPred, ldaPred, testing[,1])
head(predDF)
head(predDf)
calculateAcc <- function(predictions, actual){sum(predictions[predictions==actual]) / length(actual)}
calculateAcc(rfPred, testing[,1])
testing[,1]
calculateAcc <- function(predictions, actual){sum(predictions==actual) / length(actual)}
calculateAcc(rfPred, testing[,1])
names(predDf)[4] <- "actual"
head(predDf)
comboFit <- train(actual~., "rf", data=predDf)
calculateAcc(rfPred, testing[,1])
calculateAcc(gbmPred, testing[,1])
calculateAcc(ldaPred, testing[,1])
calculateAcc(comboPredPred, testing[,1])
calculateAcc(comboPred, testing[,1])
comboPred <- predict(comboFit, testing[,-1])
calculateAcc(comboPred, testing[,1])
?plot.enet
library(AppliedPredictiveModeling)
?plot.enet
setwd("Documents/learn_R/pml_project/")
a <- NULL
a == NULL
is.na(a)
a <- NA
is.null(a)
a <- NULL
is.null(a)
!is.null(a)
list("a", 2)
list("a", 2)[1[]]
list("a", 2)[1
]
tomfun <- function(){a <- 4; b <- "z"; c <- list(a,b); return(c)}
y <- tomfun()
y
y$a
y$1``
y$1
y[1]
y[2]
y[[2]]
x,y <- tomfun()
c(x,y) <- tomfun()
library(caret)
library(dplyr)
make_NA_colname_vector <- function(dataframe, threshold){
NA_colname_vector <- vector()
for (colname in names(dataframe)){
if (sum(is.na(dataframe[,colname]))/nrow(dataframe) > threshold){
NA_colname_vector <- append(NA_colname_vector, colname)
}
}
NA_colname_vector
}
preProcessDataframe <- function(dataframe){
dataframe[dataframe==""] <- NA
dataframe <- dataframe %>% select(-X) %>% select(-contains("timestamp")) %>%
select(-contains("window")) %>% select(-user_name) %>% select(-classe)
for (colname in names(dataframe)) {
dataframe[,colname] <- as.numeric(dataframe[,colname])
}
dataframe
}
imputeMissing <- function(dataframe, validation=NULL){
cci <- complete.cases(dataframe)
if (!is.null(validation)) {cciv <- complete.cases(validation)}
colnames_to_impute <- make_NA_colname_vector(dataframe, threshold=0.95)
for (colname in colnames_to_impute) {
training_outcome <- dataframe[cci,colname]
training_df <- select(dataframe, -colnames_to_impute)[cci,]
fit1 <- train(x=training_df, y=training_outcome, method="glm")
dataframe[-cci, colname] <- predict(fit1, newdata=select(dataframe, -colnames_to_impute)[-cci,])
if (!is.null(validation)){
validation[-cciv, colname] <- predict(fit1, newdata=select(validation, -colnames_to_impute)[-cciv,])
}
}
list(dataframe, validation)
}
all_data <- read.csv("training.csv")
validation <- read.csv("testing.csv")
clean_data <- preProcessDataframe(all_data)
clean_validation <- preProcessDataframe(validation)
all_data <- read.csv("training.csv")
validation <- read.csv("testing.csv")
names(all_data)[160]
names(validation)[160]
library(caret)
library(dplyr)
make_NA_colname_vector <- function(dataframe, threshold){
NA_colname_vector <- vector()
for (colname in names(dataframe)){
if (sum(is.na(dataframe[,colname]))/nrow(dataframe) > threshold){
NA_colname_vector <- append(NA_colname_vector, colname)
}
}
NA_colname_vector
}
preProcessDataframe <- function(dataframe, whichType="train"){
dataframe[dataframe==""] <- NA
dataframe <- dataframe %>% select(-X) %>% select(-contains("timestamp")) %>%
select(-contains("window")) %>% select(-user_name)
if (whichType=="train") {dataframe <- select(dataframe, -classe)}
if (whichType=="val") {dataframe <- select(dataframe, -problem_id)}
for (colname in names(dataframe)) {
dataframe[,colname] <- as.numeric(dataframe[,colname])
}
dataframe
}
imputeMissing <- function(dataframe, validation=NULL){
cci <- complete.cases(dataframe)
if (!is.null(validation)) {cciv <- complete.cases(validation)}
colnames_to_impute <- make_NA_colname_vector(dataframe, threshold=0.95)
for (colname in colnames_to_impute) {
training_outcome <- dataframe[cci,colname]
training_df <- select(dataframe, -colnames_to_impute)[cci,]
fit1 <- train(x=training_df, y=training_outcome, method="glm")
dataframe[-cci, colname] <- predict(fit1, newdata=select(dataframe, -colnames_to_impute)[-cci,])
if (!is.null(validation)){
validation[-cciv, colname] <- predict(fit1, newdata=select(validation, -colnames_to_impute)[-cciv,])
}
}
list(dataframe, validation)
}
clean_data <- preProcessDataframe(all_data)
clean_validation <- preProcessDataframe(validation, whichType="val")
df_imputed <- imputeMissing(clean_data, validation)
clean_data <- df_imputed[[1]]
clean_validation <- df_imputed[[2]]
head(clean_data)
head(clean_validation)
df_imputed <- imputeMissing(clean_data, validation=validation)
clean_data <- preProcessDataframe(all_data)
clean_validation <- preProcessDataframe(validation, whichType="val")
df_imputed <- imputeMissing(clean_data, validation=validation)
all_data <- read.csv("training.csv")
validation <- read.csv("testing.csv")
clean_data <- preProcessDataframe(all_data)
clean_validation <- preProcessDataframe(validation, whichType="val")
df_imputed <- imputeMissing(clean_data, validation=clean_validation)
clean_data <- df_imputed[[1]]
clean_validation <- df_imputed[[2]]
head(clean_validation)
head(clean_data)
imputeMissing <- function(dataframe, validation=NULL){
cci <- complete.cases(dataframe)
if (!is.null(validation)) {cciv <- complete.cases(validation)}
colnames_to_impute <- make_NA_colname_vector(dataframe, threshold=0.95)
for (colname in colnames_to_impute) {
training_outcome <- dataframe[cci,colname]
training_df <- select(dataframe, -colnames_to_impute)[cci,]
fit1 <- train(x=training_df, y=training_outcome, method="glm")
dataframe[-cci, colname] <- predict(fit1, newdata=select(dataframe, -colnames_to_impute)[-cci,])
if (!is.null(validation)){
validation[-cciv, colname] <- predict(fit1, newdata=select(validation, -colnames_to_impute)[-cciv,])
print("hi")
}
}
list(dataframe, validation)
}
sum(complete.cases(validation))
sum(complete.cases(all_data))
clean_data <- preProcessDataframe(all_data)
clean_validation <- preProcessDataframe(validation, whichType="val")
df_imputed <- imputeMissing(clean_data, validation=clean_validation)
imputeMissing <- function(dataframe, validation=NULL){
cci <- complete.cases(dataframe)
if (!is.null(validation)) {cciv <- complete.cases(validation)}
colnames_to_impute <- make_NA_colname_vector(dataframe, threshold=0.95)
for (colname in colnames_to_impute) {
training_outcome <- dataframe[cci,colname]
training_df <- select(dataframe, -colnames_to_impute)[cci,]
fit1 <- train(x=training_df, y=training_outcome, method="glm")
dataframe[-cci, colname] <- predict(fit1, newdata=select(dataframe, -colnames_to_impute)[-cci,])
if (!is.null(validation)){
validation[-cciv, colname] <- predict(fit1, newdata=select(validation, -colnames_to_impute)[-cciv,])
print(validation[-cciv, colname])
}
}
list(dataframe, validation)
}
clean_data <- preProcessDataframe(all_data)
clean_validation <- preProcessDataframe(validation, whichType="val")
df_imputed <- imputeMissing(clean_data, validation=clean_validation)
complete.cases(validation)
imputeMissing <- function(dataframe, validation=NULL){
cci <- complete.cases(dataframe)
if (!is.null(validation)) {cciv <- complete.cases(validation)}
colnames_to_impute <- make_NA_colname_vector(dataframe, threshold=0.95)
for (colname in colnames_to_impute) {
training_outcome <- dataframe[cci,colname]
training_df <- select(dataframe, -colnames_to_impute)[cci,]
fit1 <- train(x=training_df, y=training_outcome, method="glm")
dataframe[-cci, colname] <- predict(fit1, newdata=select(dataframe, -colnames_to_impute)[-cci,])
if (!is.null(validation)){
validation[, colname] <- predict(fit1, newdata=select(validation, -colnames_to_impute)[-cciv,])
print(validation[, colname])
}
}
list(dataframe, validation)
}
clean_data <- preProcessDataframe(all_data)
clean_validation <- preProcessDataframe(validation, whichType="val")
df_imputed <- imputeMissing(clean_data, validation=clean_validation)
imputeMissing <- function(dataframe, validation=NULL){
cci <- complete.cases(dataframe)
if (!is.null(validation)) {cciv <- complete.cases(validation)}
colnames_to_impute <- make_NA_colname_vector(dataframe, threshold=0.95)
for (colname in colnames_to_impute) {
training_outcome <- dataframe[cci,colname]
training_df <- select(dataframe, -colnames_to_impute)[cci,]
fit1 <- train(x=training_df, y=training_outcome, method="glm")
dataframe[-cci, colname] <- predict(fit1, newdata=select(dataframe, -colnames_to_impute)[-cci,])
if (!is.null(validation)){
validation[, colname] <- predict(fit1, newdata=select(validation, -colnames_to_impute)[,])
print(validation[, colname])
}
}
list(dataframe, validation)
}
clean_data <- preProcessDataframe(all_data)
clean_validation <- preProcessDataframe(validation, whichType="val")
df_imputed <- imputeMissing(clean_data, validation=clean_validation)
imputeMissing <- function(dataframe, validation=NULL){
cci <- complete.cases(dataframe)
if (!is.null(validation)) {cciv <- complete.cases(validation)}
colnames_to_impute <- make_NA_colname_vector(dataframe, threshold=0.95)
for (colname in colnames_to_impute) {
training_outcome <- dataframe[cci,colname]
training_df <- select(dataframe, -colnames_to_impute)[cci,]
fit1 <- train(x=training_df, y=training_outcome, method="glm")
dataframe[-cci, colname] <- predict(fit1, newdata=select(dataframe, -colnames_to_impute)[-cci,])
if (!is.null(validation)){
validation[, colname] <- predict(fit1, newdata=select(validation, -colnames_to_impute)[,])
print(validation[, colname])
}
}
list(dataframe, validation)
}
imputeMissing <- function(dataframe, validation=NULL){
cci <- complete.cases(dataframe)
if (!is.null(validation)) {cciv <- complete.cases(validation)}
colnames_to_impute <- make_NA_colname_vector(dataframe, threshold=0.95)
for (colname in colnames_to_impute) {
training_outcome <- dataframe[cci,colname]
training_df <- select(dataframe, -colnames_to_impute)[cci,]
fit1 <- train(x=training_df, y=training_outcome, method="glm")
dataframe[-cci, colname] <- predict(fit1, newdata=select(dataframe, -colnames_to_impute)[-cci,])
if (!is.null(validation)){
validation[, colname] <- predict(fit1, newdata=select(validation, -colnames_to_impute)[,])
}
}
list(dataframe, validation)
}
all_data <- read.csv("training.csv")
validation <- read.csv("testing.csv")
clean_data <- preProcessDataframe(all_data)
clean_validation <- preProcessDataframe(validation, whichType="val")
df_imputed <- imputeMissing(clean_data, validation=clean_validation)
clean_data <- df_imputed[[1]]
clean_validation <- df_imputed[[2]]
head(clean_validation)
clean_data <- cbind(clean_data, all_data$classe)[2:nrow(all_data),]
names(clean_data)[ncol(clean_data)] <- "classe"
clean_validation <- cbind(clean_validation, validation$problem_id)
names(clean_validation)[ncol(clean_validation)] <- "problem_id"
head(clean_validation)
set.seed(110216)
inTrain = createDataPartition(clean_data$classe, p = 3/4)[[1]]
training = clean_data[inTrain,]
testing = clean_data[-inTrain,]
end_col_no <- ncol(training)
preProc <- preProcess(training[,-end_col_no], method="pca", pcaComp=30)
trainPC <- predict(preProc, training[,-end_col_no])
trainPC$classe <- training$classe
pc_rf_fit <- train(classe ~ ., method="rf", data=trainPC)
testPC <- predict(preProc, testing[,-end_col_no])
pc_predictions <- predict(pc_rf_fit, testPC)
confusionMatrix(testing$classe, pc_predictions)
validationPC <- predict(preProc, clean_validation[,-end_col_no])
validation_predictions <- predict(pc_rf_fit, validationPC)
for (i in 1:length(validation_predictions)){
print(sprintf("%d: %s", i, validation_predictions[i]))
}
preProc
preProc$thresh
preProc$pcaComp
preProcess(training[,-end_col_no], method="pca", pcaComp=30)
preProcess(training[,-end_col_no], method="pca", pcaComp=30)$thresh
preProcess(training[,-end_col_no], method="pca", thresh=0.92)$numComp
preProcess(training[,-end_col_no], method="pca", thresh=0.95)$numComp
preProcess(training[,-end_col_no], method="pca", thresh=0.94)$numComp
install.packages("tinytex")
View(pc_rf_fit)
save(pc_rf_fit, file="pc_rf_fit.Rdata")
