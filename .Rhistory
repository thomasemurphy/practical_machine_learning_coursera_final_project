rfPred
sum(rfPred == vowel.test$y)
nrow(vowel.test)
275/462
length(rfPred)
gbmFit <- train(y~., method="gbm", data=vowel.train)
gbmAcc
gbmPred
gbmFit
gbmPred <- predict(gbmFit, vowel.test[,-1])
gbmAcc <- sum(gbmPred == vowel.test$y) / length(gbmPred)
gbmAcc
bothAgree <- rfPred[rfPred==gbmPred]
bothAgree
bothAgreeTrue <- vowel.test$y[rfPred == gbmPred]
bothAgAcc <- sum(bothAgree == vowel.test$y) / length(bothAgreeTrue)
bothAgreeTrue <- vowel.test[,rfPred == gbmPred]$y
bothAgreeTrue <- vowel.test[rfPred == gbmPred,"y"]
bothAgAcc <- sum(bothAgree == vowel.test$y) / length(bothAgreeTrue)
bothAgreeTrue <- vowel.test[rfPred == gbmPred,]$y
bothAgAcc <- sum(bothAgree == vowel.test$y) / length(bothAgreeTrue)
length(bothAgree)
bothAgreeTrue
length(bothAgreeTrye)
length(bothAgreeTrue)
bothAgAcc <- sum(bothAgree == bothAgreeTrue) / length(bothAgreeTrue)
bothAgAcc
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
rfFit <- train(diagnosis~., method="rf", data=training)
rfPred <- predict(rfFit, training[,-1])
gbmFit <- train(diagnosis~., method="gbm", data=training)
gbmPred <- predict(gbmFit, training[,-1])
ldaPred <- predict(ldaFit, testing[,-1])
gbmPred <- predict(gbmFit, testing[,-1])
rfPred <- predict(rfFit, testing[,-1])
ldaFit <- train(diagnosis~., method="lda", data=training)
ldaPred <- predict(ldaFit, testing[,-1])
ldaPred <- predict(ldaFit, testing[,-1])
predDf <- data.frame(rfPred, gbmPred, ldaPred, testing[,1])
head(predDF)
head(predDf)
calculateAcc <- function(predictions, actual){sum(predictions[predictions==actual]) / length(actual)}
calculateAcc(rfPred, testing[,1])
testing[,1]
calculateAcc <- function(predictions, actual){sum(predictions==actual) / length(actual)}
calculateAcc(rfPred, testing[,1])
names(predDf)[4] <- "actual"
head(predDf)
comboFit <- train(actual~., "rf", data=predDf)
calculateAcc(rfPred, testing[,1])
calculateAcc(gbmPred, testing[,1])
calculateAcc(ldaPred, testing[,1])
calculateAcc(comboPredPred, testing[,1])
calculateAcc(comboPred, testing[,1])
comboPred <- predict(comboFit, testing[,-1])
calculateAcc(comboPred, testing[,1])
?plot.enet
library(AppliedPredictiveModeling)
?plot.enet
library(caret)
library(dplyr)
library(rattle)
make_NA_colname_vector <- function(dataframe, threshold){
NA_colname_vector <- vector()
for (colname in names(dataframe)){
if (sum(is.na(dataframe[,colname]))/nrow(dataframe) > threshold){
NA_colname_vector <- append(NA_colname_vector, colname)
}
}
NA_colname_vector
}
make_blank_colname_vector <- function(dataframe, threshold){
blank_colname_vector <- vector()
for (colname in names(dataframe)){
if (sum(dataframe[,colname]=="") / nrow(dataframe) > threshold){
blank_colname_vector <- append(blank_colname_vector, colname)
}
}
blank_colname_vector
}
calculate_accuracy <- function(predictions, actual){
sum(predictions==actual) / length(actual)
}
training_all <- read.csv("training.csv")
setwd("Documents/learn_R/pml_project/")
training_all <- read.csv("training.csv")
training_raw <- read.csv("training.csv")
library(caret)
library(dplyr)
library(rattle)
make_NA_colname_vector <- function(dataframe, threshold){
NA_colname_vector <- vector()
for (colname in names(dataframe)){
if (sum(is.na(dataframe[,colname]))/nrow(dataframe) > threshold){
NA_colname_vector <- append(NA_colname_vector, colname)
}
}
NA_colname_vector
}
make_blank_colname_vector <- function(dataframe, threshold){
blank_colname_vector <- vector()
for (colname in names(dataframe)){
if (sum(dataframe[,colname]=="") / nrow(dataframe) > threshold){
blank_colname_vector <- append(blank_colname_vector, colname)
}
}
blank_colname_vector
}
calculate_accuracy <- function(predictions, actual){
sum(predictions==actual) / length(actual)
}
training_raw <- read.csv("training.csv")
training_complete <- training_raw[complete.cases(training_raw),]
training_stripped <- training_complete %>%
select(-X) %>%
select(-contains("timestamp")) %>%
select(-contains("window")) %>%
select(-user_name)
for (colname in names(training_stripped)){
training_stripped[,colname] <- as.numeric(training_stripped[,colname])
}
summary(training_stripped)
training_all <- read.csv("training.csv")
training_stripped <- training_all %>%
select(-X) %>%
select(-contains("timestamp")) %>%
select(-contains("window")) %>%
select(-user_name)
training_complete_cases <- training_stripped[complete.cases(training_stripped),]
tr_bcv <- make_blank_colname_vector(dataframe=training_complete_cases, threshold=0.9)
for (colname in names(training_complete_cases)){
training_complete_cases[,colname] <- as.numeric(training_complete_cases[,colname])
}
training_incomplete_cases <- training_stripped[-complete.cases(training_stripped),]
training_incomplete_cases <- training_stripped[!complete.cases(training_stripped),]
colnames_to_impute <- make_blank_colname_vector(dataframe=training_incomplete_cases, threshold=0.95)
head(training_incomplete_cases)
training_incomplete_cases <- training_stripped[!complete.cases(training_stripped),]
colnames_to_impute <- make_blank_colname_vector(dataframe=training_incomplete_cases, threshold=0.95)
colnames_to_impute <- make_NA_colname_vector(dataframe=training_incomplete_cases, threshold=0.95)
make_blank_colname_vector <- function(dataframe, threshold){
blank_colname_vector <- vector()
for (colname in names(dataframe)){
if (sum(dataframe[,colname]=="") / nrow(dataframe) > threshold){
blank_colname_vector <- append(blank_colname_vector, colname)
}
}
blank_colname_vector
}
colnames_to_impute <- append(colnames_to_impute,
make_blank_colname_vector(dataframe=training_incomplete_cases, threshold=0.95))
summary(training_incomplete_cases)
colnames_to_impute <- make_NA_colname_vector(dataframe=training_stripped, threshold=0.95)
colnames_to_impute <- append(colnames_to_impute,
make_blank_colname_vector(dataframe=training_stripped, threshold=0.95))
head(training_stripped)
make_blank_colname_vector(training_all, threshold=0.9)
make_blank_colname_vector <- function(dataframe, threshold){
blank_colname_vector <- vector()
for (colname in names(dataframe)){
print(sum(dataframe[, colname]==""))
print(nrow(dataframe))
if (sum(dataframe[,colname]=="") / nrow(dataframe) > threshold){
blank_colname_vector <- append(blank_colname_vector, colname)
}
}
blank_colname_vector
}
make_blank_colname_vector(training_all, threshold=0.9)
make_blank_colname_vector <- function(dataframe, threshold){
blank_colname_vector <- vector()
for (colname in names(dataframe)){
print(colname)
print(sum(dataframe[, colname]==""))
print(nrow(dataframe))
if (sum(dataframe[,colname]=="") / nrow(dataframe) > threshold){
blank_colname_vector <- append(blank_colname_vector, colname)
}
}
blank_colname_vector
}
make_blank_colname_vector(training_all, threshold=0.9)
head(training_all$max_roll_belt, 100)
NA_colname_vector <- make_NA_colname_vector(dataframe=training_all, threshold=0.95)
blank_colname_vector <- make_blank_colname_vector(dataframe=training_all, threshold=0.95)
a=NA
a
a/9
training_all[training_all==""] <- NA
training_all <- read.csv("training.csv")
training_all[training_all==""] <- NA
training_stripped <- training_all %>%
select(-X) %>%
select(-contains("timestamp")) %>%
select(-contains("window")) %>%
select(-user_name)
training_complete_cases <- training_stripped[complete.cases(training_stripped),]
tr_bcv <- make_blank_colname_vector(dataframe=training_complete_cases, threshold=0.9)
make_blank_colname_vector <- function(dataframe, threshold){
blank_colname_vector <- vector()
for (colname in names(dataframe)){
if (sum(dataframe[,colname]=="") / nrow(dataframe) > threshold){
blank_colname_vector <- append(blank_colname_vector, colname)
}
}
blank_colname_vector
}
colnames_to_impute <- make_NA_colname_vector(dataframe=training_stripped, threshold=0.95)
length(colnames_to_impute)
str(training_complete_cases)
for (colname in names(training_complete_cases)){
training_complete_cases[,colname] <- as.numeric(training_complete_cases[,colname])
}
str(training_complete_cases)
training_complete_cases <- training_stripped[complete.cases(training_stripped),]
for (colname in names(training_complete_cases)){
if (class(training_complete_cases[,colname]) == "factor"){
training_complete_cases[,colname] <- as.character(training_complete_cases[,colname])
}
training_complete_cases[,colname] <- as.numeric(training_complete_cases[,colname])
}
training_complete_cases <- training_stripped[complete.cases(training_stripped),]
head(training_complete_cases)
str(training_complete_cases)
for (colname in names(training_complete_cases)){
# if (class(training_complete_cases[,colname]) == "factor"){
#   training_complete_cases[,colname] <- as.character(training_complete_cases[,colname])
# }
training_complete_cases[,colname] <- as.numeric(training_complete_cases[,colname])
}
str(training_complete_cases)
training_incomplete_cases <- training_stripped[!complete.cases(training_stripped),]
colnames_to_impute <- make_NA_colname_vector(dataframe=training_stripped, threshold=0.95)
for (colname in names(training_complete_cases)){
training_incomplete_cases[,colname] <- as.numeric(training_incomplete_cases[,colname])
}
for (colname in colnames_to_impute){
model_fit <- train(colname ~ ., method="glm", data=training_complete_cases[,-colnames_to_impute])
training_incomplete_cases$colname <- predict(model_fit, newdata=training_incomplete_cases[,-colname])
}
for (colname in colnames_to_impute){
model_fit <- train(colname ~ ., method="glm", data=training_complete_cases[,-c(colnames_to_impute)])
training_incomplete_cases$colname <- predict(model_fit, newdata=training_incomplete_cases[,-c(colname)])
}
for (colname in colnames_to_impute){
model_fit <- train(colname ~ ., method="glm", data=training_complete_cases[,!names(training_complete_cases) %in% colnames_to_impute])
training_incomplete_cases$colname <- predict(model_fit, newdata=training_incomplete_cases[, !names(training_incomplete_cases) %in% c(colname)])
}
for (colname in colnames_to_impute){
model_fit <- train(colname ~ ., method="glm", data=training_complete_cases[,!names(training_complete_cases) %in% colnames_to_impute])
# training_incomplete_cases$colname <- predict(model_fit, newdata=training_incomplete_cases[, !names(training_incomplete_cases) %in% c(colname)])
}
for (colname in colnames_to_impute){
model_fit <- train(colname ~ ., method="glm", data=select(training_complete_cases, -colnames_to_impute))
# training_incomplete_cases$colname <- predict(model_fit, newdata=training_incomplete_cases[, !names(training_incomplete_cases) %in% c(colname)])
}
for (colname in colnames_to_impute){
training_df <- cbind(training_complete_cases[,colname], select(training_complete_cases, -colnames_to_impute))
model_fit <- train(colname ~ ., method="glm", data=training_df)
# training_incomplete_cases$colname <- predict(model_fit, newdata=training_incomplete_cases[, !names(training_incomplete_cases) %in% c(colname)])
}
for (colname in colnames_to_impute){
training_df <- cbind(training_complete_cases[,colname], select(training_complete_cases, -colnames_to_impute))
model_fit <- train(training_df$colname ~ training_df$., method="glm")
# training_incomplete_cases$colname <- predict(model_fit, newdata=training_incomplete_cases[, !names(training_incomplete_cases) %in% c(colname)])
}
for (colname in colnames_to_impute){
true_values <- training_complete_cases[,colname]
training_df <- select(training_complete_cases, -colnames_to_impute)
model_fit <- train(true_values ~ training_df, method="glm")
# training_incomplete_cases$colname <- predict(model_fit, newdata=training_incomplete_cases[, !names(training_incomplete_cases) %in% c(colname)])
}
head(training_complete_cases)
myfit <- train(accel_forearm_x ~ ., method="glm", data=training_complete_cases)
warnings()
summary(training_complete_cases$classe)
training_all <- read.csv("training.csv")
training_all[training_all==""] <- NA
training_stripped <- training_all %>%
select(-X) %>%
select(-contains("timestamp")) %>%
select(-contains("window")) %>%
select(-user_name) %>%
select(-classe)
training_complete_cases <- training_stripped[complete.cases(training_stripped),]
for (colname in names(training_complete_cases)){
training_complete_cases[,colname] <- as.numeric(training_complete_cases[,colname])
}
training_incomplete_cases <- training_stripped[!complete.cases(training_stripped),]
colnames_to_impute <- make_NA_colname_vector(dataframe=training_stripped, threshold=0.95)
colnames_to_impute
for (colname in names(training_incomplete_cases)){
training_incomplete_cases[,colname] <- as.numeric(training_incomplete_cases[,colname])
}
for (colname in colnames_to_impute){
true_values <- training_complete_cases[,colname]
training_df <- select(training_complete_cases, -colnames_to_impute)
training_df <- cbind(training_df, true_values)
model_fit <- train(training_df[,colname] ~ subset(training_df, -c(colname)), method="glm")
# training_incomplete_cases$colname <- predict(model_fit, newdata=training_incomplete_cases[, !names(training_incomplete_cases) %in% c(colname)])
}
for (colname in colnames_to_impute){
true_values <- training_complete_cases[,colname]
training_df <- select(training_complete_cases, -colnames_to_impute)
training_df <- cbind(training_df, true_values)
model_fit <- train(training_df[,colname] ~ subset(training_df, -c(colname))[,], method="glm")
# training_incomplete_cases$colname <- predict(model_fit, newdata=training_incomplete_cases[, !names(training_incomplete_cases) %in% c(colname)])
}
for (colname in colnames_to_impute){
true_values <- training_complete_cases[,colname]
training_df <- select(training_complete_cases, -colnames_to_impute)
training_df <- cbind(training_df, true_values)
model_fit <- train(colname~., method="glm", data=training_df)
# training_incomplete_cases$colname <- predict(model_fit, newdata=training_incomplete_cases[, !names(training_incomplete_cases) %in% c(colname)])
}
for (colname in colnames_to_impute){
print('a')
true_values <- training_complete_cases[,colname]
training_df <- select(training_complete_cases, -colnames_to_impute)
training_df <- cbind(training_df, true_values)
model_fit <- train(colname~., method="glm", data=training_df)
# training_incomplete_cases$colname <- predict(model_fit, newdata=training_incomplete_cases[, !names(training_incomplete_cases) %in% c(colname)])
}
for (colname in colnames_to_impute){
print('a')
true_values <- training_complete_cases[,colname]
training_df <- select(training_complete_cases, -colnames_to_impute)
training_df <- cbind(training_df, true_values)
model_fit <- train(training_df[,colname] ~ training_df[,], method="glm")
# training_incomplete_cases$colname <- predict(model_fit, newdata=training_incomplete_cases[, !names(training_incomplete_cases) %in% c(colname)])
}
for (col in select(training_complete_cases, colnames_to_impute)){
print('a')
# true_values <- training_complete_cases[,colname]
# training_df <- select(training_complete_cases, -colnames_to_impute)
training_df <- cbind(col, select(training_complete_cases, -colnames_to_impute))
model_fit <- train(col ~ ., method="glm", data=training_df)
# training_incomplete_cases$colname <- predict(model_fit, newdata=training_incomplete_cases[, !names(training_incomplete_cases) %in% c(colname)])
}
for (col in select(training_complete_cases, colnames_to_impute)){
print(names(col))
# true_values <- training_complete_cases[,colname]
# training_df <- select(training_complete_cases, -colnames_to_impute)
training_df <- cbind(col, select(training_complete_cases, -colnames_to_impute))
model_fit <- train(col ~ ., method="glm", data=training_df)
# training_incomplete_cases$colname <- predict(model_fit, newdata=training_incomplete_cases[, !names(training_incomplete_cases) %in% c(colname)])
}
for (col in select(training_complete_cases, colnames_to_impute)){
print(col)
# true_values <- training_complete_cases[,colname]
# training_df <- select(training_complete_cases, -colnames_to_impute)
training_df <- cbind(col, select(training_complete_cases, -colnames_to_impute))
model_fit <- train(col ~ ., method="glm", data=training_df)
# training_incomplete_cases$colname <- predict(model_fit, newdata=training_incomplete_cases[, !names(training_incomplete_cases) %in% c(colname)])
}
model_fit_list <- vector()
for (col in select(training_complete_cases, colnames_to_impute)){
training_df <- cbind(col, select(training_complete_cases, -colnames_to_impute))
model_fit <- train(col ~ ., method="glm", data=training_df)
model_fit_list <- append(model_fit_list, model_fit)
}
count <- 1
for (col in select(training_incomplete_cases, colnames_to_impute)){
prediction_df <- select(training_incomplete_cases, -colnames_to_impute)
model_fit <- model_fit_list[count]
col <- predict(model_fit, prediction_df)
count <- count + 1
}
for (col in select(training_complete_cases, colnames_to_impute)){
training_df <- cbind(col, select(training_complete_cases, -colnames_to_impute))
model_fit <- train(col ~ ., method="glm", data=training_df)
model_fit_list <- append(model_fit_list, c(model_fit))
}
model_fit_list <- vector()
for (col in select(training_complete_cases, colnames_to_impute)){
training_df <- cbind(col, select(training_complete_cases, -colnames_to_impute))
model_fit <- train(col ~ ., method="glm", data=training_df)
model_fit_list <- append(model_fit_list, c(model_fit))
}
training_all <- read.csv("training.csv")
training_all[training_all==""] <- NA
training_stripped <- training_all %>%
select(-X) %>%
select(-contains("timestamp")) %>%
select(-contains("window")) %>%
select(-user_name) %>%
select(-classe)
for (col in training_stripped) {
col <- as.numeric(as.character(col))
}
warnings()
str(training_stripped)
training_all <- read.csv("training.csv")
training_all[training_all==""] <- NA
training_stripped <- training_all %>%
select(-X) %>%
select(-contains("timestamp")) %>%
select(-contains("window")) %>%
select(-user_name) %>%
select(-classe)
for (colname in names(training_stripped)) {
training_stripped[,colname] <- as.numeric(as.character(training_stripped[,colname]))
}
str(training_stripped)
cci <- complete_cases(training_stripped)
cci <- complete.cases(training_stripped)
sum(cci)
training_all <- read.csv("training.csv")
training_all[training_all==""] <- NA
training_stripped <- training_all %>%
select(-X) %>%
select(-contains("timestamp")) %>%
select(-contains("window")) %>%
select(-user_name) %>%
select(-classe)
for (colname in names(training_stripped)) {
training_stripped[,colname] <- as.numeric(training_stripped[,colname])
}
cci <- complete.cases(training_stripped)
sum(cci)
cci
colnames_to_impute <- make_NA_colname_vector(dataframe=training_stripped, threshold=0.95)
?train
for (colname in colnames_to_impute) {
training_outcome <- training_stripped[cci,colname]
training_df <- select(training_stripped, -colnames_to_impute)[cci,]
myfit <- train(x=training_df, y=training_outcome, method="glm")
print("hi")
}
for (colname in colnames_to_impute) {
training_outcome <- training_stripped[cci,colname]
training_df <- select(training_stripped, -colnames_to_impute)[cci,]
myfit <- train(x=training_df, y=training_outcome, method="glm")
training_stripped[-cci,colname] <- predict(myfit, newdata=select(training_stripped, -colnames_to_impute)[-cci,])
print("hi")
}
head(training_stripped)
training_all <- read.csv("training.csv")
training_all[training_all==""] <- NA
training_stripped <- training_all %>%
select(-X) %>%
select(-contains("timestamp")) %>%
select(-contains("window")) %>%
select(-user_name) %>%
select(-classe)
for (colname in names(training_stripped)) {
training_stripped[,colname] <- as.numeric(training_stripped[,colname])
}
cci <- complete.cases(training_stripped)
colnames_to_impute <- make_NA_colname_vector(dataframe=training_stripped, threshold=0.95)
count <- 1
for (colname in colnames_to_impute) {
training_outcome <- training_stripped[cci,colname]
training_df <- select(training_stripped, -colnames_to_impute)[cci,]
myfit <- train(x=training_df, y=training_outcome, method="glm")
training_stripped[-cci,colname] <- predict(myfit, newdata=select(training_stripped, -colnames_to_impute)[-cci,])
print(count)
count <- count + 1
}
head(training_stripped)
sum(complete.cases(training_stripped))
training_imputed <- cbind(training_stripped, training_all$classe)
training_imputed <- cbind(training_stripped, training_all$classe)[2:length(training_all),]
training_imputed <- cbind(training_stripped, training_all$classe)[2:nrow(training_all),]
sum(complete.cases(training_imputed))
set.seed(110216)
inTrain = createDataPartition(training_imputed$classe, p = 3/4)[[1]]
training = training_imputed[inTrain,]
testing = training_imputed[-inTrain,]
training_imputed$classe
training_all$classe
training_imputed <- cbind(training_stripped, training_all$classe)[2:nrow(training_all),]
names(training_imputed)[ncol(training_imputed)] <- "classe"
set.seed(110216)
inTrain = createDataPartition(training_imputed$classe, p = 3/4)[[1]]
training = training_imputed[inTrain,]
testing = training_imputed[-inTrain,]
preProc <- preProcess(training[,-153], method="pca", pcaComp=30)
summary(preProc)
preProc
trainPC <- predict(preProc, training[,-153])
trainPC$classe <- training$classe
pc_model_fit <- train(classe ~ ., method="rpart", data=trainPC)
testPC <- predict(preProc, testing[,-153])
pc_predictions <- predict(pc_model_fit, testPC)
confusionMatrix(testing$classe, pc_predictions)
preProcess(training[,-153], method="pca", thresh=0.9)$numComp
preProcess(training[,-153], method="pca", thresh=0.95)$numComp
pc_model_fit <- train(classe ~ ., method="rf", data=trainPC)
testPC <- predict(preProc, testing[,-153])
pc_predictions <- predict(pc_model_fit, testPC)
confusionMatrix(testing$classe, pc_predictions)
?select
ex_fun <- function(a){
a+1
}
fun2 <- function(b){
ex_fun(b)
}
fun2(0)
validation <- read.csv("testing.csv")
head(validation)
unique(validation$user_name)
